#!/bin/bash
# Complete setup script - creates all Generator Triad files

set -e

echo "🚀 Setting up Triad Generator System..."
echo ""

# Check if .claude exists
if [ ! -d ".claude" ]; then
    echo "Creating .claude directory..."
    mkdir -p .claude
fi

# Create full directory structure
echo "📁 Creating directory structure..."
mkdir -p .claude/commands
mkdir -p .claude/generator/agents
mkdir -p .claude/generator/lib
mkdir -p .claude/hooks
mkdir -p .claude/graphs
mkdir -p .claude/constitutional

# Check for Python and NetworkX
echo "🔍 Checking dependencies..."
if ! command -v python3 &> /dev/null; then
    echo "❌ Python 3 is required. Please install Python 3.10+ and try again."
    exit 1
fi

if ! python3 -c "import networkx" 2>/dev/null; then
    echo "📦 Installing NetworkX..."
    pip3 install networkx
fi

echo "✅ All dependencies OK"
echo ""

# Verify all required files exist
echo "🔍 Verifying Generator Triad files..."

REQUIRED_FILES=(
    ".claude/commands/generate-triads.md"
    ".claude/generator/agents/domain-researcher.md"
    ".claude/generator/agents/workflow-analyst.md"
    ".claude/generator/agents/triad-architect.md"
    ".claude/generator/lib/templates.py"
    ".claude/README.md"
)

MISSING_FILES=()

for file in "${REQUIRED_FILES[@]}"; do
    if [ ! -f "$file" ]; then
        MISSING_FILES+=("$file")
    fi
done

if [ ${#MISSING_FILES[@]} -gt 0 ]; then
    echo "⚠️  Missing required Generator files:"
    for file in "${MISSING_FILES[@]}"; do
        echo "   - $file"
    done
    echo ""
    echo "Please ensure all Generator Triad files are present."
    exit 1
fi

echo "✅ All Generator Triad files present"

# Verify KM system components
echo "🔍 Verifying KM system components..."

KM_REQUIRED_FILES=(
    ".claude/km/detection.py"
    ".claude/km/formatting.py"
    ".claude/km/system_agents.py"
    ".claude/km/auto_invocation.py"
    ".claude/hooks/on_stop.py"
    ".claude/agents/system/research-agent.md"
    ".claude/agents/system/verification-agent.md"
)

KM_MISSING_FILES=()

for file in "${KM_REQUIRED_FILES[@]}"; do
    if [ ! -f "$file" ]; then
        KM_MISSING_FILES+=("$file")
    fi
done

if [ ${#KM_MISSING_FILES[@]} -gt 0 ]; then
    echo "⚠️  Missing KM system files:"
    for file in "${KM_MISSING_FILES[@]}"; do
        echo "   - $file"
    done
    echo ""
    echo "Please ensure all KM system files are present."
    exit 1
fi

echo "✅ All KM system files present"
echo ""

# Create empty graph file for generator
echo "📊 Initializing generator knowledge graph..."
cat > .claude/graphs/generator_graph.json << 'EOF'
{
  "directed": true,
  "multigraph": false,
  "graph": {},
  "nodes": [],
  "links": [],
  "_meta": {
    "triad_name": "generator",
    "created_at": "2025-01-08T00:00:00Z",
    "updated_at": "2025-01-08T00:00:00Z",
    "node_count": 0,
    "edge_count": 0
  }
}
EOF

# Create empty violations file
echo "📋 Creating constitutional monitoring files..."
cat > .claude/constitutional/violations.json << 'EOF'
[]
EOF

cat > .claude/constitutional/checkpoints.json << 'EOF'
{
  "domain-researcher": [
    {
      "principle": "thoroughness",
      "check": "Research domain before asking questions",
      "severity": "high"
    },
    {
      "principle": "evidence-based-claims",
      "check": "Cite sources for domain research",
      "severity": "high"
    }
  ],
  "workflow-analyst": [
    {
      "principle": "complete-transparency",
      "check": "Present multiple options with trade-offs",
      "severity": "high"
    }
  ],
  "triad-architect": [
    {
      "principle": "thoroughness",
      "check": "Generate all required files",
      "severity": "high"
    }
  ]
}
EOF

# Create minimal settings.json for generator
echo "⚙️  Creating Claude Code configuration..."
cat > .claude/settings.json << 'EOF'
{
  "hooks": {
    "note": "Hooks will be generated by Triad Architect for your custom triads"
  },
  "generator_triad": {
    "version": "1.0.0",
    "agents": [
      "domain-researcher",
      "workflow-analyst",
      "triad-architect"
    ],
    "status": "ready"
  }
}
EOF

echo ""
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo "✅ TRIAD GENERATOR SYSTEM READY!"
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo ""
echo "📁 Created structure:"
echo "   .claude/"
echo "   ├── commands/generate-triads.md (slash command)"
echo "   ├── generator/ (meta-agents)"
echo "   │   ├── agents/ (Domain Researcher, Workflow Analyst, Triad Architect)"
echo "   │   └── lib/ (templates)"
echo "   ├── graphs/ (initialized)"
echo "   ├── constitutional/ (monitoring)"
echo "   └── README.md (documentation)"
echo ""
echo "🎯 NEXT STEPS:"
echo ""
echo "1. Launch Claude Code:"
echo "   $ claude code"
echo ""
echo "2. Run the generator:"
echo "   > /generate-triads"
echo ""
echo "3. Answer questions about your workflow"
echo ""
echo "4. Get a custom triad system designed for you!"
echo ""
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo ""
echo "📖 For more info: cat .claude/README.md"
echo ""
